// Package model starting point opens and initializes the PostgreSQL database.
package model

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	_ "github.com/lib/pq"

	"github.com/LuleaUniversityOfTechnology/2018-project-roaster/model/forwardengineer"
)

// Holds the database handle, sql.DB. It's thread safe for concurrent use, see:
// https://golang.org/pkg/database/sql/#DB
var database *sql.DB

// Set driver name used by database/sql (registered by driver).
const driver = "postgres"

//go:generate go run github.com/LuleaUniversityOfTechnology/2018-project-roaster/cmd/inlinesql -in forwardengineer/schema.sql -pkg forwardengineer -out forwardengineer/schema.go
// Open initializes a database connection and forward engineers a schema and
// tables generated by inlinesql and parsed by the forwardengineer package.
func Open(source string) error {
	db, err := sql.Open(driver, source)
	if err != nil {
		log.Fatal(err)
	}

	// Start thread that waits for program exit and closes the database.
	defer graceful(db.Close)

	database = db

	// Initialize the database.
	initQueries := forwardengineer.GetQueries()
	for _, query := range initQueries {
		_, err := database.Exec(query)
		if err != nil {
			return fmt.Errorf("for sql query: %s, got answer: %v", query, err)
		}
	}

	return nil
}

// graceful calls a function upon program exit.
func graceful(fn func() error) {
	go func() {
		sig := make(chan os.Signal, 1)
		defer close(sig)

		signal.Notify(sig, syscall.SIGINT, syscall.SIGTERM)
		<-sig

		err := fn()
		if err != nil {
			panic(err)
		}

		os.Exit(0)
	}()
}
