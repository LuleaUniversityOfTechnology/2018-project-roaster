// Package model starting point opens and initializes the PostgreSQL database.
package model

import (
	"database/sql"
	"fmt"
	"log"

	"github.com/LuleaUniversityOfTechnology/2018-project-roaster/model/forwardengineer"
	"github.com/LuleaUniversityOfTechnology/2018-project-roaster/util"
	_ "github.com/lib/pq" // pq hooks into database/sql as the 'postgres' driver
)

// Holds the database handle, sql.DB. It's thread safe for concurrent use, see:
// https://golang.org/pkg/database/sql/#DB
var database *sql.DB

// Set driver name used by database/sql (registered by driver).
const driver = "postgres"

// Open initializes a database connection and forward engineers a schema and
// tables generated by inlinesql and parsed by the forwardengineer package.
//go:generate go run github.com/LuleaUniversityOfTechnology/2018-project-roaster/cmd/inlinesql -in forwardengineer/schema.sql -pkg forwardengineer -out forwardengineer/schema.go
func Open(source string) error {
	db, err := sql.Open(driver, source)
	if err != nil {
		log.Fatal(err)
	}

	// Start thread that waits for program exit and closes the database.
	defer util.Graceful(db.Close)

	database = db

	// Initialize the database.
	initQueries := forwardengineer.GetQueries()
	for _, query := range initQueries {
		_, err := database.Exec(query)
		if err != nil {
			return fmt.Errorf("for sql query: %s, got answer: %v", query, err)
		}
	}

	return nil
}
